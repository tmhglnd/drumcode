#N canvas 827 239 527 327 12;
#X declare -path else;
#X declare -path cyclone;
#X obj 125 171 metro 10;
#X obj 125 109 loadbang;
#X msg 128 140 1;
#X obj 59 242 t b f;
#X obj 125 299 -;
#X floatatom 296 299 5 0 0 0 - - - 12;
#X obj 125 339 expr if($f1 > 0 \, $f1/$f2 \, $f1/$f3);
#X obj 59 339 f;
#X obj 59 383 +;
#X text 168 478 y[n] = y[n-1] + (x[n] - y[n-1]) / slide;
#X text 168 501 slide = if (x[n] - y[n-1] > 0) slideup else slidedown;
#X msg 127 201 0;
#X obj 351 299 loadmess 130;
#X obj 210 257 loadbang;
#X obj 125 419 expr if($f1 < 0.0001 \, 0 \, $f1);
#X text 536 87 Create a slide \, that slides back to a value over time \, but immediately shoots up when an incoming value is received greater than that ground value., f 44;
#X text 536 56 dc.slide;
#X text 168 457 the formula used:;
#X text 168 523 from: https://cycling74.com/forums/slide-object-to-use-for-attack-and-release-within-compressor#reply-58ed20536908cf22c838f044;
#X obj 337 170 args -;
#X obj 337 201 route -interval;
#X obj 337 140 loadbang;
#X msg 213 299 1;
#X obj 59 58 inlet (number) input a number to create a slide for;
#X obj 59 598 outlet (number) slide continuous output;
#X obj 536 257 declare -path else;
#X obj 536 293 declare -path cyclone;
#X obj 296 109 inlet (number) slide amount 0 - 127;
#X obj 296 257 scale 0 127 5 500 2;
#X connect 0 0 11 0;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X connect 3 0 7 0;
#X connect 3 1 4 0;
#X connect 4 0 6 0;
#X connect 5 0 6 2;
#X connect 6 0 8 1;
#X connect 7 0 8 0;
#X connect 8 0 14 0;
#X connect 8 0 24 0;
#X connect 11 0 3 0;
#X connect 12 0 5 0;
#X connect 13 0 22 0;
#X connect 14 0 7 1 48.................K.....9++++B....f++++O4+++ux++++S9+++q7+++um++++;
#X connect 14 0 4 1 48.................S....j9++++D....o++++K1++++B....h8+++u....fc++++;
#X connect 19 0 20 0;
#X connect 20 0 0 1;
#X connect 20 1 28 0;
#X connect 21 0 19 0;
#X connect 22 0 6 1;
#X connect 23 0 3 0;
#X connect 27 0 28 0;
#X connect 28 0 5 0;
