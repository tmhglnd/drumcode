#N canvas 827 239 734 565 12;
#X declare -path drumcode/pd;
#X declare -path cyclone;
#X declare -path else;
#X obj 183 356 timer;
#X obj 86 336 t b b b;
#X text 225 400 if larger than half quantize time trigger 1 for next beat, f 20;
#X obj 183 401 >;
#X floatatom 261 231 5 0 0 0 - - - 12;
#X obj 261 261 !/ 240000;
#X obj 261 373 / 2;
#X obj 261 298 pak f 16;
#X obj 261 325 / 1;
#X obj 186 568 int 0;
#X msg 225 519 1;
#X obj 161 488 t b b;
#X msg 163 519 0;
#X obj 222 488 sel 1 0;
#X obj 410 529 t f f;
#X obj 61 906 zl.reg;
#X obj 186 865 t l l;
#X obj 61 833 buddy;
#X obj 562 661 declare -path drumcode/pd;
#X obj 199 59 inlet (trigger) input a trigger from dc.trigger~ or dc.trigger.velocity~;
#X obj 562 694 declare -path cyclone;
#X obj 563 728 declare -path else;
#X obj 464 181 args -;
#X obj 464 214 route -name;
#X obj 464 109 loadbang;
#X obj 583 190 inlet (number) subdivision quantization for pattern detection (default = 16), f 34;
#N canvas 733 172 450 300 fill-array-0 0;
#X obj 594 573 uzi;
#X msg 596 601 0;
#X obj 594 629 zl.group;
#X text 632 601 init with empty array;
#X obj 434 537 inlet;
#X obj 316 658 outlet;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 4 0 0 0;
#X restore 421 564 pd fill-array-0;
#X obj 197 912 outlet (list) rolling detected quantized pattern;
#X obj 61 945 outlet (list) detected quantized pattern every bar;
#N canvas 733 172 450 300 join-replace 0;
#X obj 79 200 zl.slice 16;
#X obj 79 157 zl.join;
#X text 259 304 set previous to 1 if trigger was detected after the beat, f 18;
#X obj 179 261 zl.reg;
#X obj 179 305 replace 1 1;
#X obj 79 350 zl.rev;
#X obj 79 71 inlet;
#X obj 237 71 inlet;
#X obj 297 71 inlet;
#X obj 179 71 inlet;
#X obj 79 384 outlet;
#X connect 0 0 3 1;
#X connect 0 0 5 0;
#X connect 0 0 1 1 48.................J....X9+++uB....l++++q6+++eE....59+++WA...vv++++;
#X connect 1 0 0 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 4 0 1 1 48.................M....P9+++eC....j++++G0+++ur++++Q8+++K6+++uV++++;
#X connect 5 0 10 0;
#X connect 6 0 1 0;
#X connect 7 0 0 0;
#X connect 8 0 0 1;
#X connect 9 0 3 0;
#X restore 186 609 pd join-replace;
#X obj 282 143 t f f;
#X obj 599 250 unjoin 2;
#X obj 86 181 dc.metronome 16;
#X obj 282 112 r \$0-quant;
#X obj 583 336 s \$0-quant;
#X obj 615 308 s \$0-len;
#X obj 410 488 r \$0-len;
#X text 518 393 get BPM from global or named transport, f 18;
#X text 280 487 set step to 1 if trigger detected before the next hit, f 17;
#X obj 394 289 s \$0-name;
#X obj 84 628 r \$0-name;
#X obj 483 250 prepend -name;
#X obj 61 865 t b;
#X obj 147 246 blocksize~;
#X obj 147 214 loadbang;
#X obj 147 278 samps2ms;
#X text 28 213 short delay to compensate for clicktrack audio latency output, f 14;
#X obj 61 720 % 16;
#X obj 61 752 sel 0;
#X obj 61 661 dc.metronome 16;
#X obj 61 594 r \$0-quant;
#X obj 115 720 r \$0-len;
#X obj 667 238 inlet (number) report interval and list output length (default = 16), f 29;
#X obj 446 394 value;
#X msg 527 143 -name dc-transport;
#X obj 464 143 t b b;
#X msg 464 365 symbol \$1-bpm;
#X obj 464 336 prepend list;
#X obj 199 325 t b b;
#X obj 446 423 s \$0-bpm;
#X obj 261 199 r \$0-bpm;
#X obj 901 59 cnv 15 283 29 empty empty dc.rhythm.analyse 20 13 0 20 #00deb1 #ffffff 0;
#X text 900 293 Optional arguments are the quantization interval and the length at which to output the list of the perceived rhythm., f 38;
#X text 900 98 Analyse a incoming rhythmical pattern. The rhythm is quantised to a fixed interval \, for example 16th or 8th notes. The tempo is determined by the BPM set in the dc.transport. Therefore a dc.transport is needed to make this object function properly. The rhythm that is output is a list of 1's and 0's where 1 is a detected onset and 0 is a detected rest (nothing detected). The object can output the "rolling" rhythm \, a continues output for every note \, or a fixed interval based on the output listlength, f 41;
#X obj 86 308 delay;
#X connect 0 0 3 0;
#X connect 1 0 17 1;
#X connect 1 1 11 0;
#X connect 1 2 0 0;
#X connect 3 0 13 0;
#X connect 4 0 5 0;
#X connect 5 0 7 0;
#X connect 6 0 3 1;
#X connect 7 0 8 0;
#X connect 8 0 6 0;
#X connect 9 0 29 0;
#X connect 10 0 9 1;
#X connect 11 0 12 0;
#X connect 11 1 9 0;
#X connect 12 0 9 1;
#X connect 13 0 10 0;
#X connect 13 1 29 1;
#X connect 14 0 29 3;
#X connect 14 1 26 0;
#X connect 15 0 28 0;
#X connect 16 0 15 1;
#X connect 16 1 27 0;
#X connect 17 0 42 0;
#X connect 19 0 58 0;
#X connect 22 0 23 0;
#X connect 23 0 57 0;
#X connect 23 0 41 0;
#X connect 23 1 31 0;
#X connect 24 0 55 0;
#X connect 25 0 34 0;
#X connect 26 0 29 2;
#X connect 29 0 16 0;
#X connect 30 0 32 0;
#X connect 30 1 7 1;
#X connect 31 0 34 0;
#X connect 31 1 35 0;
#X connect 32 0 64 0;
#X connect 33 0 30 0;
#X connect 36 0 14 0;
#X connect 40 0 49 0;
#X connect 41 0 39 0;
#X connect 41 0 32 0;
#X connect 42 0 15 0;
#X connect 43 0 45 0;
#X connect 44 0 43 0;
#X connect 45 0 64 1;
#X connect 47 0 48 0;
#X connect 48 0 17 0;
#X connect 49 1 47 0;
#X connect 50 0 49 0;
#X connect 51 0 47 1;
#X connect 52 0 35 0;
#X connect 53 0 59 0;
#X connect 54 0 23 0;
#X connect 55 0 22 0;
#X connect 55 1 54 0;
#X connect 56 0 53 1;
#X connect 57 0 56 0;
#X connect 58 0 0 1;
#X connect 58 1 53 0;
#X connect 60 0 4 0;
#X connect 64 0 1 0;
