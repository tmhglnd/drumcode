#N canvas 827 239 527 327 12;
#X declare -path ~/path/to/sounds;
#X declare -path drumcode/pd;
#X declare -path FluidCorpusManipulation;
#X obj 39 96 cnv 15 421 67 empty empty written\ by\ Timo\ Hoogland\,\ 2024\,\ www.timohoogland.com 7 12 0 12 #efefef #000000 0;
#X obj 38 2663 dc.timer;
#X obj 39 39 cnv 15 421 41 empty empty ./drum.code 20 20 0 24 #00cb9e #ffffff 0;
#X text 39 173 A library of tools for hybrid drums (or other instruments) \, with onset detection \, timbre analysis \, basic algorithmic composition techniques \, midi and osc trigger outputs \, and more;
#X obj 38 2627 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X obj 697 2939 dc.inrange 50 100, f 16;
#X obj 700 2904 hsl 128 17 0 127 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X obj 700 2980 hsl 128 17 0 127 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X text 39 133 - Funded by Creative Industries Fund NL;
#X text 39 113 - License: GNU GPL-3.0;
#X obj 435 2627 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X floatatom 435 2703 5 0 0 0 - - - 12;
#X obj 435 2663 dc.count 250;
#X floatatom 38 2703 5 0 0 0 - - - 12;
#X obj 908 2978 hsl 128 17 0 127 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X obj 908 2904 hsl 128 17 0 127 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X obj 908 3004 hsl 128 17 0 127 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X obj 905 2940 dc.gate 50;
#X text 435 2580 count triggers within a timeframe, f 16;
#X text 909 2857 output left if value passes threshold \, else output right, f 25;
#X text 697 2856 only output if value is within the specified range, f 23;
#X floatatom 38 2842 5 0 0 0 - - - 12;
#X obj 38 2804 dc.average 10;
#X text 56 2760 get the average over 10 values, f 14;
#X text 233 2760 get the speed value from 0-1, f 14;
#X obj 219 2840 hsl 128 17 0.01 1 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X text 38 2579 time from triggers, f 10;
#X obj 216 2804 dc.speed;
#X obj 219 3040 hsl 128 17 0 1 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #000000 #000000 0 1;
#X text 233 2958 slide back from the incoming value slowly to 0, f 23;
#X obj 216 3006 dc.slide;
#X msg 435 2925 /trigger/speed \$1;
#X text 454 2951 send Open Sound Control (OSC) messages over the network or locally, f 24;
#X text 435 2887 format an OSC message like so:;
#X text 924 3029 use this object to send osc "wireless" to the dc.osc.send object, f 24;
#X obj 905 3081 dc.osc.message /slider/low;
#X obj 435 3006 dc.osc.send localhost 4880;
#X obj 200 599 dc.trigger~;
#X obj 38 2969 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #000000 #000000;
#X obj 38 3040 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #000000 #000000;
#X obj 38 3006 dc.wait 2000;
#X obj 200 377 adc~ 1;
#X obj 200 406 meter~;
#X obj 200 660 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X obj 272 547 hsl 128 17 0 1 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 2572 1;
#X text 269 462 <- [meter~] - useful to see the level of the incoming sound;
#X text 38 2922 reduce speed limit of incoming values, f 17;
#X text 269 521 adjust trigger the sensitivity (0 -> 1), f 31;
#X msg 39 1127 60;
#X text 75 1094 play a MIDI note from a number (pitch) \, with velocity and duration, f 24;
#X obj 435 2769 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #000000;
#X floatatom 435 2840 5 0 0 0 - - - 12;
#X text 480 2766 get the estimated BPM;
#X text 480 2837 outputs after 2nd click;
#X obj 921 1151 dc.random note;
#X obj 921 1082 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #000000;
#X obj 921 1232 dc.note.scale minor eb;
#X obj 39 1162 dc.note.out 120 250;
#X obj 921 1312 dc.note.out 120 300;
#X obj 949 1271 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #e4e4e4 #000000 #000000 0 256;
#X obj 949 1185 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #e4e4e4 #000000 #000000 0 256;
#X text 952 1079 generate a random note between MIDI 36-72, f 21;
#X text 1069 1228 map the note to a minor eb scale, f 17;
#X obj 39 377 dc.audio.onoff~;
#X obj 435 2804 dc.tempo;
#X text 229 659 BANG!;
#X obj 645 1162 dc.step 60 63 67 72;
#X obj 645 1082 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #000000;
#X obj 645 1232 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #e4e4e4 #000000 #000000 0 256;
#X msg 787 1114 72 77 79;
#X text 677 1078 step through a list of numbers, f 15;
#X text 787 1135 replace with new numbers, f 13;
#X text 279 596 <- (4) detect triggers!;
#X text 269 374 (3) now start by using a microphone input to detect triggers in the sound, f 24;
#X text 39 411 (1) first turn the audio on, f 14;
#X text 39 455 (2) adjust sound settings for your soundcard in preferences, f 18;
#X text 39 797 (5) Now you can start to use this trigger to control other instruments/sounds/parameters/lights and more. All based on different time/timbre descriptors:, f 67;
#X obj 39 1318 dc.sample~;
#X obj 39 1274 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #000000;
#X msg 78 1274 read;
#X text 732 1314 play a synth sound;
#X text 732 1269 set the MIDI note;
#X text 126 1314 play a soundfile from the computer;
#X msg 600 1274 63;
#X msg 787 1082 36 36 48;
#X msg 688 1274 65;
#X text 126 1353 point to a folder of samples with:;
#X obj 126 1454 dc.sample~ bell.aiff;
#X text 126 1411 then easily load the sample with just the filename:, f 25;
#X obj 126 1378 declare -path ~/path/to/sounds;
#X text 126 1270 <- load the file;
#X obj 39 289 declare -path drumcode/pd;
#X obj 645 1318 dc.synth~;
#X obj 216 2663 dc.direction;
#X text 216 2616 slowing down or speeding up?, f 14;
#X obj 219 2693 hsl 128 17 0.01 1 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X obj 90 1746 dc.fx.delay~;
#X obj 39 2003 dac~;
#X msg 365 1607 60;
#X obj 365 1690 dc.fx.distort~;
#X obj 365 1642 dc.synth~ 120 100;
#X msg 39 1607 70;
#X obj 39 1661 dc.synth~;
#X obj 112 1607 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 6001 1;
#X obj 152 1661 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 10094 1;
#X obj 183 1714 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 7450 1;
#X text 108 1582 delaytime;
#X text 149 1641 feedback;
#X text 180 1688 damping;
#X obj 501 1642 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 10230 1;
#X text 498 1616 disortion;
#X text 39 249 Getting started: to use this library in your patches \, add the drumcode folder to the ~/Documents/plugdata/externals and make this object:;
#X obj 365 1802 dc.fx.filter~;
#X obj 501 1759 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 4884 1;
#X text 498 1734 filter cutoff;
#X text 461 1687 a distortion effect;
#X text 461 1799 a filter effect with resonance, f 19;
#X text 117 1770 a delay effect with delaytime \, feedback and damping, f 22;
#X obj 39 860 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #000000;
#X obj 39 938 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #000000;
#X floatatom 89 938 5 0 0 0 - - - 12;
#X floatatom 169 938 5 0 0 0 - - - 12;
#X floatatom 257 938 5 0 0 0 - - - 12;
#X floatatom 342 938 5 0 0 0 - - - 12;
#X floatatom 418 938 5 0 0 0 - - - 12;
#X text 89 955 time in ms;
#X text 560 856 the trigger.controls gives various different outputs (a combination of the individual objects below) for trigger \, time interval \, speed \, speed ramp \, direction of speed and hits counter. This is the best entrypoint for beginners because it has many things ready to go., f 31;
#X text 169 955 speed value;
#X text 257 955 speed ramp;
#X text 342 955 direction;
#X text 418 955 count hits received;
#X text 39 961 trigger;
#X text 560 986 See below for more detailed individual objec \, ts like dc.timer \, dc.speed \, dc.tempo \, dc.direction \, etc, f 34;
#X obj 39 1082 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #000000;
#X obj 39 897 dc.trigger.timecontrols, f 57;
#X obj 39 319 declare -path FluidCorpusManipulation;
#X obj 570 351 pdcontrol;
#X msg 570 318 browse https://github.com/flucoma/flucoma-pd/releases/latest;
#X text 294 318 You need to install Fluid Corpus Manipulation:, f 40;
#X text 571 290 click the link \, after download \, unzip and place in /Documents/plugdata/externals, f 68;
#X obj 738 1699 dc.fx.reverb~;
#X text 832 1698 a stereo plate reverb effect with roomsize and brightness/damping, f 26;
#X msg 701 1607 70;
#X obj 701 1641 dc.synth~;
#X obj 784 1615 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 3408 1;
#X obj 806 1663 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 7110 1;
#X text 781 1594 roomsize;
#X text 803 1642 brightness;
#X obj 366 1166 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #000000;
#X msg 405 1272 read;
#X obj 366 1316 dc.sampler~;
#X text 454 1269 <- load a folder of sounds, f 15;
#X text 454 1313 play a soundfile from the computer, f 17;
#X obj 366 1201 dc.random 0 100;
#X floatatom 366 1232 5 0 0 0 - - - 12;
#X text 405 1229 Use a number to trigger the selected sound, f 21;
#X obj 457 1391 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 6400 1;
#X text 454 1366 the playback rate;
#X obj 1208 1082 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X msg 1242 1130 60 60 67 67 69 69 67 65 65 64 64 62 62 60;
#X msg 1302 1202 67 69 67 65 64 60 67 69 67 65 64 60 60 55 60 60 55 60;
#X msg 1278 1163 60 62 64 60 60 62 64 60 64 65 67 64 65 67;
#X obj 1208 1232 dc.learn;
#X obj 1208 1313 dc.note.out 120 300;
#X text 1242 1079 learn a pattern from a list of notes (a melody) and generate every next note based on the learned pattern, f 48;
#X text 1556 1160 click to replace with this melody;
#X text 1321 1220 click to add this melody to the previous learned phrase;
#X floatatom 1233 1268 5 0 0 0 - - - 12;
#X text 1522 1128 first \, click to learn this melody;
#X text 1321 1266 (if message: [markov] no chain created \, prints in the console \, first train), f 61;
#X msg 701 2625 60;
#X text 701 2580 let the value through with a certain percentage of chance, f 26;
#X obj 701 2767 dc.note.out;
#X obj 701 2703 dc.chance 70;
#X obj 770 2663 hsl 128 18 0 100 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 6392 1;
#X text 767 2639 percentage 0-100%;
#X obj 767 2729 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X msg 959 2625 60;
#X text 959 2580 let the value through with a certain percentage of chance, f 26;
#X obj 959 2767 dc.note.out;
#X obj 959 2703 dc.every 4;
#X obj 1008 2663 nbx 4 18 -1e+37 1e+37 0 1 empty empty empty 0 -8 0 10 #e4e4e4 #373737 #373737 4 256;
#X text 1008 2639 every amount;
#X text 797 2728 input if not passed;
#X obj 1008 2729 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X text 1036 2728 input every other time;
#X obj 1138 1717 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 7381 1;
#X obj 1059 1643 dc.noise~;
#X obj 1059 1762 dc.fx.degrade~;
#X text 1165 1760 a degrading effect creating an 8bit sound, f 20;
#X text 1135 1696 degrading amount;
#X text 1138 1642 play filtered noise;
#X obj 304 660 dc.trigger.display;
#X text 449 659 <- [dc.trigger.display];
#X text 449 687 the display shows the amplitude measured by the dc.trigger~. It also shows the upper and lower threshold lines \, set by the sensitivity and sensitivity range, f 38;
#X obj 701 1800 dc.fx.drywet~;
#X text 797 1799 use drywet to crossfade between an effect and the dry incoming signal, f 23;
#X obj 806 1759 hsl 128 17 0 127 0 1 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #000000 6342 1;
#X obj 39 1842 dc.gain~;
#X obj 365 2003 dac~;
#X obj 365 1842 dc.gain~;
#X obj 701 2003 dac~;
#X obj 701 1842 dc.gain~;
#X obj 1059 2003 dac~;
#X obj 1059 1842 dc.gain~;
#X text 103 1942 [dc.gain~] for a mono or stereo gain slider, f 19;
#X obj 39 1515 dac~;
#X obj 39 1354 dc.gain~;
#X obj 366 1515 dac~;
#X obj 366 1354 dc.gain~;
#X obj 645 1515 dac~;
#X obj 645 1354 dc.gain~;
#X obj 701 2324 dc.fade~;
#X obj 782 2266 tgl 25 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X floatatom 821 2330 5 0 0 0 - - - 12;
#X text 860 2328 adjust the fade in/out time in milliseconds, f 19;
#X text 811 2272 fade in/out the sound;
#X obj 821 2300 loadmess 5000;
#X obj 1059 1607 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X obj 38 2060 tgl 25 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X text 133 2159 Create a global transport that can control multiple sequencers and a clicktrack with a tempo. Be aware you can only have 1 of these running at the same time! Or you have to give them a unique -name, f 45;
#X floatatom 117 2090 5 0 0 0 - - - 16;
#X obj 117 2060 loadmess 90;
#X obj 38 2160 dc.transport;
#X text 174 2089 BPM;
#X floatatom 38 2236 5 0 0 0 - - - 12;
#X floatatom 67 2199 5 0 0 0 - - - 12;
#X obj 99 2236 hsl 128 17 0 1 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X msg 224 2090 4 4;
#X msg 311 2090 7 8;
#X text 234 2235 progress in the bar;
#X text 224 2066 change the time signature;
#X obj 38 2300 dc.clicktrack~;
#X obj 38 2333 dc.gain~;
#X obj 38 2491 dac~;
#X text 99 2338 listen to the clicktrack;
#X msg 267 2090 3 4;
#X obj 358 2520 dac~ 3 4;
#X text 83 2490 now the click is send to the main output 1/2. In live situations you might want to send the click to a separate output \, for example 3/4 ->, f 38;
#X obj 481 2160 dc.metronome 8;
#X text 481 2105 metronome sends out triggers that can be used to trigger instruments, f 23;
#X obj 481 2232 dc.step 48 48 60;
#X obj 481 2198 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X obj 481 2266 dc.synth~;
#X obj 481 2362 dc.gain~;
#X obj 481 2520 dac~;
#X obj 701 2160 dc.metronome 16;
#X obj 701 2362 dc.gain~;
#X obj 701 2520 dac~;
#X obj 701 2266 dc.noise~;
#X floatatom 701 2119 5 0 0 0 - - - 12;
#X text 743 2118 change subdivision;
#X obj 701 2198 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X text 65 2061 on/off;
#X obj 733 2232 dc.random 0 127;
#X obj 982 2221 dc.metronome 4 -name bob;
#X obj 982 2252 bng 25 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X obj 982 2119 tgl 25 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X text 1021 2118 a unique -name that can be refered to in dc.metronome and dc.clicktrack to avoid transports interfering with eachother, f 36;
#X obj 982 2179 dc.transport 120 -name bob;
#X obj 701 1201 dc.choose;
#X text 787 1200 also try choose instead of dc.step, f 16;
#X connect 1 0 13 0;
#X connect 4 0 1 0;
#X connect 5 0 7 0;
#X connect 6 0 5 0;
#X connect 10 0 12 0;
#X connect 12 0 11 0;
#X connect 13 0 22 0;
#X connect 13 0 27 0;
#X connect 13 0 93 0;
#X connect 15 0 17 0;
#X connect 16 0 35 0;
#X connect 17 0 14 0;
#X connect 17 1 16 0;
#X connect 22 0 21 0;
#X connect 25 0 31 0;
#X connect 25 0 30 0;
#X connect 27 0 25 0;
#X connect 30 0 28 0;
#X connect 31 0 36 0;
#X connect 37 0 43 0;
#X connect 37 2 192 0;
#X connect 38 0 40 0;
#X connect 40 0 39 0;
#X connect 41 0 42 0;
#X connect 42 0 37 0;
#X connect 44 0 37 1;
#X connect 48 0 57 0;
#X connect 50 0 64 0;
#X connect 54 0 60 0;
#X connect 54 0 56 0;
#X connect 55 0 54 0;
#X connect 56 0 59 0;
#X connect 56 0 58 0;
#X connect 64 0 51 0;
#X connect 66 0 68 0;
#X connect 67 0 66 0;
#X connect 68 0 92 0;
#X connect 69 0 66 1;
#X connect 77 0 207 0;
#X connect 78 0 77 0;
#X connect 79 0 77 0;
#X connect 83 0 92 0;
#X connect 84 0 66 1;
#X connect 85 0 92 0;
#X connect 92 0 211 0;
#X connect 93 0 95 0;
#X connect 96 0 198 0;
#X connect 98 0 100 0;
#X connect 99 0 112 0;
#X connect 100 0 99 0;
#X connect 101 0 102 0;
#X connect 102 0 96 0;
#X connect 102 0 198 0;
#X connect 103 0 96 1;
#X connect 104 0 96 2;
#X connect 105 0 96 3;
#X connect 109 0 99 1;
#X connect 112 0 200 0;
#X connect 113 0 112 1;
#X connect 118 0 134 0;
#X connect 133 0 48 0;
#X connect 134 0 119 0;
#X connect 134 1 120 0;
#X connect 134 2 121 0;
#X connect 134 3 122 0;
#X connect 134 4 123 0;
#X connect 134 5 124 0;
#X connect 137 0 136 0;
#X connect 140 0 195 2;
#X connect 140 1 195 3;
#X connect 142 0 143 0;
#X connect 143 0 195 0;
#X connect 143 0 195 1;
#X connect 143 0 140 0;
#X connect 144 0 140 1;
#X connect 145 0 140 2;
#X connect 148 0 153 0;
#X connect 149 0 150 0;
#X connect 150 0 209 0;
#X connect 153 0 154 0;
#X connect 154 0 150 0;
#X connect 156 0 150 2;
#X connect 158 0 162 0;
#X connect 159 0 162 1;
#X connect 160 0 162 2;
#X connect 161 0 162 1;
#X connect 162 0 163 0;
#X connect 162 0 167 0;
#X connect 170 0 173 0;
#X connect 173 0 172 0;
#X connect 173 1 176 0;
#X connect 174 0 173 1;
#X connect 177 0 180 0;
#X connect 180 0 179 0;
#X connect 180 1 184 0;
#X connect 181 0 180 1;
#X connect 186 0 188 1;
#X connect 187 0 188 0;
#X connect 188 0 204 0;
#X connect 188 0 204 1;
#X connect 195 0 202 0;
#X connect 195 1 202 1;
#X connect 197 0 195 4;
#X connect 198 0 97 1;
#X connect 198 0 97 0;
#X connect 200 0 199 0;
#X connect 200 0 199 1;
#X connect 202 0 201 0;
#X connect 202 1 201 1;
#X connect 204 0 203 0;
#X connect 204 0 203 1;
#X connect 207 0 206 1;
#X connect 207 0 206 0;
#X connect 209 0 208 1;
#X connect 209 0 208 0;
#X connect 211 0 210 1;
#X connect 211 0 210 0;
#X connect 212 0 247 0;
#X connect 213 0 212 2;
#X connect 214 0 212 3;
#X connect 217 0 214 0;
#X connect 218 0 187 0;
#X connect 219 0 223 0;
#X connect 221 0 223 1;
#X connect 222 0 221 0;
#X connect 223 0 225 0;
#X connect 223 1 226 0;
#X connect 223 2 227 0;
#X connect 228 0 223 2;
#X connect 229 0 223 2;
#X connect 232 0 233 0;
#X connect 233 0 234 0;
#X connect 233 0 234 1;
#X connect 236 0 223 2;
#X connect 239 0 242 0;
#X connect 241 0 243 0;
#X connect 242 0 241 0;
#X connect 243 0 244 0;
#X connect 244 0 245 0;
#X connect 244 0 245 1;
#X connect 246 0 252 0;
#X connect 247 0 248 0;
#X connect 247 0 248 1;
#X connect 249 0 212 0;
#X connect 250 0 246 0;
#X connect 252 0 254 0;
#X connect 252 0 249 0;
#X connect 254 0 249 2;
#X connect 255 0 256 0;
#X connect 257 0 259 0;
